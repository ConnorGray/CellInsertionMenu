Notebook[{
    Cell[StyleData[StyleDefinitions -> "Default.nb"]],

	Cell[StyleData["Input"],
		StyleKeyMapping -> {
			"/" -> "ConnorGray/CellInsertionMenu",
			(* Built in. This may need to be updated periodically. *)
			"=" -> "WolframAlphaShort",
			"*" -> "Item",
			">" -> "ExternalLanguageDefault"
		}
	],

	Cell[StyleData["ConnorGray/CellInsertionMenu"],
		Background -> GrayLevel[0.9],
		FormatType -> TextForm,
		Initialization :> (
			Needs["ConnorGray`CellInsertionMenu`" -> None];
			ConnorGray`CellInsertionMenu`CreateNewCellMenu[EvaluationCell[]]
		),
		(* Delete the CellInsertionMenu cell if it is no longer the selected
			cell. Unlike other cells, this is a very ephemeral cell. Its only
			purpose is to insert another cell, so if the users selection has
			left this cell, there is no reason to keep it around. *)
		CellDynamicExpression -> Dynamic[
			If[SelectedCells[] =!= {EvaluationCell[]},
				NotebookDelete[EvaluationCell[]]
			];
		],
		CellMargins -> {{66, 10}, {5, 8}},
		CellEventActions -> {
			(*
				Don't run the FE built-in handlers for the key events Up Arrow,
				Down Arrow, and Return.

				This prevents the normal movement behavior for the up and down
				arrow keys, and the normal "insert a new line" behavior for
				the return key.

				Note that this doesn't prevent the event handlers we define
				below from running; it only prevents the FE's default handlers
				from running. However, we need PassEventsDown to be True for
				other key events so that typing inserts characters into the
				cell in the normal way.
			*)
			PassEventsDown :> With[{
				key = Replace[
					CurrentValue["EventKey"],
					PatternTest[s_, StringQ] :> ToCharacterCode[s]
				]
			},
				(* Up Arrow, Down Arrow, Return key *)
				key =!= {63232} && key =!= {63233} && key =!= {13}
			],
			(* Note: This undocumented option causes the cell event handler
				actions to be run AFTER the default FE behavior for the
				event runs (the default is that user-specified event handlers
				are run before the default FE ones).

				We want this because we need the character the user typed to
				be added to the content of the cell before we read the
				contents of the cell in our "KeyDown" event hander. *)
			EvaluationOrder -> After,
			"KeyDown" :> (
				Needs["ConnorGray`CellInsertionMenu`" -> None];
				ConnorGray`CellInsertionMenu`CreateNewCellMenu[
					EvaluationCell[],
					CurrentValue["EventKey"]
				];
			)
		}
	],

	(*====================================================*)
	(* TemplateBox Styles                                 *)
	(*====================================================*)

	Cell[
		StyleData["ConnorGray/CellInsertionMenuItem"],
		(*
			Parameters: {label, action}
		*)
		TemplateBoxOptions -> {
			DisplayFunction -> Function @ ButtonBox[
				TemplateBox[
					{
						PaneBox[
							#1,
							FrameMargins -> 0,
							ImageMargins -> 0,
							BaselinePosition -> Baseline,
							ImageSize -> Full
						],
						FrameStyle -> Dynamic @ If[
							CurrentValue["MouseOver"],
							GrayLevel[0.8],
							GrayLevel[0.98]
						],
						RoundingRadius -> 0,
						FrameMargins -> {{5, 2}, {2, 2} },
						ImageSize -> Full,
						ImageMargins -> {{0, 0}, {0, 0} },
						Background -> Dynamic @ If[
							CurrentValue["MouseOver"],
							GrayLevel[1],
							GrayLevel[0.98]
						]
					},
					"Highlighted"
				],
				ButtonFunction :> ReleaseHold[#2],
				Appearance -> None,
				Evaluator -> Automatic
			]
		}
	]
}]